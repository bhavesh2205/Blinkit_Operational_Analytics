-- SQLBook: Code

## Calculate average delivery time for all orders in each city
select 
    s.City,
    round(avg(o.DeliveryTime),2) as AverageDeliveryTime
from 
    Orders o
left join 
    Stores s on o.StoreID = s.StoreID
group by 
    s.City
order by 
    AverageDeliveryTime;
-- SQLBook: Code
## Find the top 3 customers based on the total order value they have placed.
select 
    c.CustomerID,
    c.name,
    sum(o.totalamount) as totalordervalue
from 
    customers c
join 
    orders o on c.customerid = o.customerid
group by 
    c.customerid, c.name
order by 
    totalordervalue desc
limit 3;
-- SQLBook: Code
## Retrieve the top 3 most frequently ordered products in Mumbai.
with product_frequency as (
    select 
        p.productid,
        p.productname,
        count(*) as orderfrequency
    from 
        orders o
    join 
        orderdetails od on o.orderid = od.orderid
    join 
        products p on od.productid = p.productid
    join 
        stores s on o.storeid = s.storeid
    where 
        s.city = 'Mumbai'
    group by 
        p.productid, p.productname
)
select 
    productid,
    productname,
    orderfrequency
from 
    product_frequency
order by 
     orderfrequency desc
limit 3;

-- SQLBook: Code
## Identify the number of customers who have not placed an order in the last 30 days
select count(*) as inactive_customers
from customers c
where c.customerid not in (
    select distinct customerid
    from orders
    where orderdate >= date_sub(curdate(), interval 30 day)
);

-- SQLBook: Code
## Calculate total revenue generated by each store.
select 
    s.storeid,
    s.city,
    s.area,
    coalesce(sum(case when o.status = 'Completed' then o.totalamount else 0 end), 0) as total_revenue
from 
    stores s
left join 
    orders o on s.storeid = o.storeid
group by 
        s.storeid
order by 
    total_revenue desc;


-- SQLBook: Code

## Write a SQL query to identify customers who placed only one order in the last 3 months.
select 
    c.customerid,
    c.name,
    count(o.orderid) as order_count
from 
    customers c
left join 
    orders o on c.customerid = o.customerid
    and o.orderdate >= date_sub("2024-04-15", interval 3 month)
group by 
    c.customerid, c.name
having 
    order_count = 1
order by 
    c.customerid;
-- SQLBook: Code

## Create a list of cities with high percentages of single-order customers.
select 
    s.city,
    count(distinct o.customerid) as total_customers,
    sum(case when customer_orders.order_count = 1 then 1 else 0 end) as single_order_customers,
    round((sum(case when customer_orders.order_count = 1 then 1 else 0 end) / count(distinct o.customerid)),2) * 100 as percentage_single_order
from 
    stores s
join 
    orders o on s.storeid = o.storeid
join 
    (select 
        customerid, 
        count(orderid) as order_count
    from 
        orders
    group by 
        customerid) as customer_orders on o.customerid = customer_orders.customerid
group by 
    s.city
having 
    total_customers > 0
order by 
    percentage_single_order desc;
-- SQLBook: Code
## Analyze the relationship between the distance covered by delivery agents and the average delivery time. 
## Use SQL to derive correlation metrics.
with delivery_times as (
    select
        orderid,
        distancecovered,
        timestampdiff(minute, deliverystarttime, deliveryendtime) as delivery_time
    from delivery
),
summations as (
    select
        count(*) as n,
        sum(distancecovered) as sum_x,
        sum(delivery_time) as sum_y,
        sum(distancecovered*delivery_time) as sum_xy,
        sum(power(distancecovered, 2)) as sum_x2,
        sum(power(delivery_time, 2)) as sum_y2
    from delivery_times
)
select
    round((n * sum_xy - sum_x * sum_y) /
    sqrt((n * sum_x2 - power(sum_x, 2)) * (n * sum_y2 - power(sum_y, 2))), 2) as correlation_coefficient
from summations;
